// scripts/generate-allowed-by-role.js
// Generate role -> allowed aria-* attributes from aria-query (globals 포함).
// Run: node scripts/generate-allowed-by-role.js

const fs = require("fs");
const path = require("path");

let roles;
try {
  ({ roles } = require("aria-query")); // eslint-plugin-jsx-a11y가 의존하고 있는 그 패키지
} catch (e) {
  console.error("❌ Cannot load 'aria-query'. Try: npm i -D aria-query");
  process.exit(1);
}

const outDir = path.resolve("src/rules/logic/scripts-data");
if (!fs.existsSync(outDir)) fs.mkdirSync(outDir, { recursive: true });

const allowedByRole = {};

// roles: Map<string, RoleDef>
// RoleDef.props: Map<string, PropDef>
for (const [role, def] of roles.entries()) {
  const props = def?.props;
  const list = props && props.keys ? Array.from(props.keys()) : [];
  allowedByRole[role] = list.sort();
}

const tsOutPath = path.join(outDir, "allowed-by-role.gen.ts");
const tsOut = `// 🚀 AUTO-GENERATED by scripts/generate-allowed-by-role.js
// Source: aria-query roles map. Do not edit manually.

export const ALLOWED_BY_ROLE: Record<string, string[]> = ${JSON.stringify(allowedByRole, null, 2)};
`;

fs.writeFileSync(tsOutPath, tsOut, "utf8");

// (옵션) JSON도 같이 저장 — 디버깅용
const jsonOutPath = path.join(outDir, "allowed-by-role.gen.json");
fs.writeFileSync(jsonOutPath, JSON.stringify(allowedByRole, null, 2), "utf8");

console.log("✔ Generated:");
console.log("  -", tsOutPath);
console.log("  -", jsonOutPath);
